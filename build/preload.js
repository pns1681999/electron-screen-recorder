"use strict";const r=require("electron");let o,t=[];r.contextBridge.exposeInMainWorld("api",{toggleDraw:()=>r.ipcRenderer.send("toggle-draw"),startAfterCountdown:()=>r.ipcRenderer.send("start-record-after-countdown"),onClearCanvas:e=>r.ipcRenderer.on("clear-canvas",e),onStartRecord:e=>r.ipcRenderer.on("start-record",e),onStartRecordAfterCountdown:e=>r.ipcRenderer.on("start-record-after-countdown",e),onPauseRecord:e=>r.ipcRenderer.on("pause-record",e),onResumeRecord:e=>r.ipcRenderer.on("resume-record",e),getSources:async()=>r.ipcRenderer.invoke("get-sources"),selectSource:e=>r.ipcRenderer.invoke("select-source",e),startRecording:()=>{r.ipcRenderer.send("start-record")},stopRecording:()=>{o.state==="inactive"?r.ipcRenderer.send("exit-record"):(o.stop(),r.ipcRenderer.send("start-record"))},pauseRecording:()=>{o.pause(),r.ipcRenderer.send("pause-record")},resumeRecording:()=>{o.resume(),r.ipcRenderer.send("resume-record")},toggleRecording:()=>(console.log("MediaRecorder.state: ",o.state),o.state==="recording"?(console.log("pause recording"),o.pause()):o.state==="paused"?(console.log("resume recording"),o.resume()):(console.log("start recording"),o.start()),o.state),onSourceWindowReady:e=>{r.ipcRenderer.on("sourceId-selected",e)}});const c=e=>{t.push(e.data),console.log("video data available",t.length)},d=async()=>{console.log("mediaRecorder stopped");const e=new Blob(t,{type:"video/webm; codecs=vp9"}),n=Buffer.from(await e.arrayBuffer());console.log("buffer",n),o=null,t=[],r.ipcRenderer.send("save-video",n)},a=e=>{o=new MediaRecorder(e),o.ondataavailable=c,o.onstop=d},s=e=>{console.log("Stream error: ",e)},i=async e=>{try{const n=await navigator.mediaDevices.getUserMedia({audio:!1,video:{mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:e}}});a(n)}catch(n){s(n)}};r.ipcRenderer.on("sourceId-selected",(e,n)=>{i(n)});r.ipcRenderer.on("start-record-after-countdown",()=>{o.start()});
